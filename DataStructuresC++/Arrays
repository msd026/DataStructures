//============================================================================
// Name        : two_dim_arrays_from_input.cpp
// Author      : Mahamadou Diallo
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>

using namespace std;

const int MAX_SIZE = 30;


class List{

private:

	int end; // the index of the last valid item in the list

	int curr;// the index of the current item in the list

	int list[MAX_SIZE]; // the list

public:
	// constructor
	// remember that an empty list has a "size" of -1 and its "position" is at -1

	List()

{
		end = -1;
		curr = -1;
}

	// copy constructor
	// clones the list l and sets the last element as the current

	List(const List &l)

	{
		end = l.end;
		curr = end;

		//a copy constructor
		for(int i = 0;i <= l.end; i++)
		{

			list[i]=l.list[i];

		}

	}

	// copy constructor
	// clones the list l and sets the last element as the current

	void operator=(const List &l)

	{
		end = l.end;

		curr = end;

		for(int i=0;i <= l.end; i++)

		{

			list[i]=l.list[i];
		}

	}

	// navigates to the beginning of the list
	void First()

	{

		curr = 0;

	}

	// navigates to the end of the list
	// the end of the list is at the last valid item in the list
	// this should not be possible for an empty list (although maybe it doesn't matter?)
	void Last()

	{

		//navigates to end of list if the the list isn't empty

		curr = end;

	}

	// navigates to the specified element (0-index)
	// this should not be possible for an empty list
	// this should not be possible for invalid positions
	void SetPos(int pos)

	{
		if (pos >= 0 && pos <= end)

			curr = pos;

	}

	// navigates to the previous element
	// this should not be possible for an empty list
	// there should be no wrap-around
	void Prev()
	{
		//navigates to previous element in the list
		if(curr > 0)

			curr--;
	}

	// navigates to the next element
	// this should not be possible for an empty list
	// there should be no wrap-around
	void Next ()

	{

		if(curr < end)

			curr++;

	}

	// returns the location of the current element (or -1)
	int GetPos()

	{
		return curr;
	}

	// returns the size of the list
	// size does not imply capacity
	int GetSize()
	{

		return end + 1;
	}

	// returns the value of the current element (or -1)
	int GetValue() const
	{

		if (curr >= 0)

			return  list[curr];

		else

			return -1;
	}

	// inserts an item before the current element
	// the new element becomes the current
	// this should not be possible for a full list
	void InsertBefore(int data)
	{
		int i = end, j = i + 1;

		if (curr < 0)

		{
			curr = 0;

			end++;

			list[0] = data;
		}
		else if (j < MAX_SIZE)
		{
			end++;

			for (; i >= curr; i--, j--)

				list[j] = list[i];

			list[j] = data;
		}

	}

	// inserts an item after the current element
	// the new element becomes the current
	// this should not be possible for a full list
	void InsertAfter(int data)

	{
		int i = end + 1, j = i + 1;

		if (j < MAX_SIZE) {

			end++;

			curr++;

			for (; i >= curr; i--, j--)

				list[j] = list[i];

			list[j] = data;
		}


	}

	// removes the current element (collapsing the list)
	// this should not be possible for an empty list
	void Remove()

	{

		if( end >= 0 )//list is not empty

		{

			for(int i = curr+1; i <= end; i++)

			{

				list[i-1] = list[i];

			}

			end--;

			if(end < 0)

			{

				curr = -1;

			}

		}

	}

	// replaces the value of the current element with the specified value
	// this should not be possible for an empty list
	void Replace(int data)

	{

		if(curr >= 0)

		{

			list[curr] = data;

		}

	}

	//returns if list is empty
	bool IsEmpty() const

	{

		if(end < 0)

			return true;

		else

			return false;

	}

	// returns if the list is full
	bool IsFull()

	{

		//returns if list is full

		if(end >= 29)

			return true;

		else

			return false;

	}

	// returns the concatenation of two lists
	// l should not be modified
	// l should be concatenated to the end of *this
	// the returned list should not exceed MAX_SIZE elements
	// the last element of the new list is the current
	List operator+(const List &l)

	{

		List result;

		for(int i = 0;i <= end; i++)

		{

			result.InsertAfter(list[i]);

			result.Next();

		}

		for(int i=0; i <= l.end; i++)

		{

			result.InsertAfter(l.list[i]);

			result.Next();

		}

		return result;

	}

	bool operator==(const List &l) const

				{

		//returns if two lists are equal (by value)

		if (end == l.end)

		{

			for (int i = 0; i < end; ++i)

				if (list[i] != l.list[i])

					return false;
		}

		else

			return false;

		return true;

				}

	// returns if two lists are not equal (by value)
	bool operator!=(const List &l) const

				{

		if (end == l.end)
		{
			for (int i = 0; i < end; ++i)

				if (list[i] != l.list[i])

					return true;
		}
		else

			return true;

		return false;

				}

    // returns a string representation of the entire list (e.g., 1 2 3 4 5)
    // the string "NULL" should be returned for an empty list
	friend ostream& operator<<(ostream &out, const List &l)

	{

		if (l.end < 0)

			out << "NULL";

		else

			for (int i = 0; i <= l.end; ++i)

				out << l.list[i] << " ";

		return out;

	}

};


int main()
{
	List a, b;

	cout << " 1 " << a.GetValue() << endl;
	cout << " 2 " << "a(" << a.GetSize() << "/" << a.GetPos() << ") = " << a << endl;
	cout << " 3 " << "b(" << b.GetSize() << "/" << b.GetPos() << ") = " << b << endl;
	for (int i=1; i<=25; i++)
	{
		a.InsertAfter(i);
		b.InsertBefore(i);
	}
	cout << " 4 " << "a(" << a.GetSize() << "/" << a.GetPos() << ") = " << a << endl;
	cout << " 5 " << "b(" << b.GetSize() << "/" << b.GetPos() << ") = " << b << endl;
	List c(a);
	cout << " 6 " << "c(" << c.GetSize() << "/" << c.GetPos() << ") = " << c << endl;
	a.Remove();
	a.Remove();
	for (int i=0; i<5; i++)
		a.Prev();
	a.Remove();
	a.Remove();
	cout << " 7 " << "a(" << a.GetSize() << "/" << a.GetPos() << ") = " << a << endl;
	a.First();
	a.Remove();
	for (int i=0; i<a.GetSize()/2; a.Next(),i++)
	{
		a.Replace(a.GetValue()*5);
		a.Next();
	}
	cout << " 8 " << "a(" << a.GetSize() << "/" << a.GetPos() << ") = " << a << endl;
	a.Last();
	a.Next();
	a.Next();
	a.Remove();
	cout << " 9 " << "a(" << a.GetSize() << "/" << a.GetPos() << ") = " << a << endl;
	a.SetPos(a.GetSize()*2/3);
	a.Replace(a.GetValue()*12345);
	cout << "10 " << "a(" << a.GetSize() << "/" << a.GetPos() << ") = " << a << endl;
	a.SetPos(a.GetSize());
	a.Remove();
	cout << "11 " << "a(" << a.GetSize() << "/" << a.GetPos() << ") = " << a << endl;
	a.SetPos(a.GetSize()-1);
	a.Remove();
	cout << "12 " << "a is " << (!a.IsEmpty() ? "not " : "") << "empty\n";
	cout << "13 " << "a is " << (!a.IsFull() ? "not " : "") << "full\n";
	for (int i=0; i<1000; i++)
		a.InsertBefore(i);
	cout << "14 " << "a(" << a.GetSize() << "/" << a.GetPos() << ") = " << a << endl;
	cout << "15 " << "c(" << c.GetSize() << "/" << c.GetPos() << ") = " << c << endl;
	cout << "16 " << "a is " << (!a.IsEmpty() ? "not " : "") << "empty\n";
	cout << "17 " << "a is " << (!a.IsFull() ? "not " : "") << "full\n";
	List d(a);
	cout << "18 " << "a(" << a.GetSize() << "/" << a.GetPos() << ") = " << a << endl;
	cout << "19 " << "d(" << d.GetSize() << "/" << d.GetPos() << ") = " << d << endl;
	cout << "20 " << "a " << ((a == d) ? "==" : "!=") << " d\n";
	a.Remove();
	cout << "21 " << "a(" << a.GetSize() << "/" << a.GetPos() << ") = " << a << endl;
	cout << "22 " << "d(" << d.GetSize() << "/" << d.GetPos() << ") = " << d << endl;
	cout << "23 " << "a " << ((a != d) ? "!=" : "==") << " d\n";
	a = c;
	c.Remove();
	cout << "24 " << "a(" << a.GetSize() << "/" << a.GetPos() << ") = " << a << endl;
	cout << "25 " << "b(" << b.GetSize() << "/" << b.GetPos() << ") = " << b << endl;
	cout << "26 " << "c(" << c.GetSize() << "/" << c.GetPos() << ") = " << c << endl;
	cout << "27 " << "a " << ((a == c) ? "==" : "!=") << " c\n";
	List e = b + a;
	cout << "28 " << "a(" << a.GetSize() << "/" << a.GetPos() << ") = " << a << endl;
	cout << "29 " << "b(" << b.GetSize() << "/" << b.GetPos() << ") = " << b << endl;
	cout << "30 " << "e(" << e.GetSize() << "/" << e.GetPos() << ") = " << e << endl;
	for (int i=0; i<1000; i++)
	{
		b.Remove();
		c.Remove();
	}
	cout << "31 " << "a(" << a.GetSize() << "/" << a.GetPos() << ") = " << a << endl;
	cout << "32 " << "b(" << b.GetSize() << "/" << b.GetPos() << ") = " << b << endl;
	cout << "33 " << "c(" << c.GetSize() << "/" << c.GetPos() << ") = " << c << endl;
	cout << "34 " << "e(" << e.GetSize() << "/" << e.GetPos() << ") = " << e << endl;
	List f = b + a;
	cout << "35 " << "a(" << a.GetSize() << "/" << a.GetPos() << ") = " << a << endl;
	cout << "36 " << "b(" << b.GetSize() << "/" << b.GetPos() << ") = " << b << endl;
	cout << "37 " << "f(" << f.GetSize() << "/" << f.GetPos() << ") = " << f << endl;

	return 0;
}


